/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Patient;

import model.Person;
import model.PersonDirectory;
import model.VitalSigns;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.VitalSignsHistory;
import userInterface.Person.AddPatientVitalSignJPanel;
import userInterface.Person.CreatePersonJPanel;
import userInterface.Person.UpdateVitalSignsJPanel;

/**
 *
 * @author kinjal
 */
public class ManagePatientVitalSignJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientVitalSignJPanel
     */
    
    
    private Person person;
    private PersonDirectory personDirectory;
    private JPanel workAreaJPanel;
    
    private int abnormalCount=0;
    
    public ManagePatientVitalSignJPanel(JPanel workAreaJPanel,PersonDirectory personDirectory) {
        initComponents();
        this.personDirectory = personDirectory;
        this.workAreaJPanel = workAreaJPanel;
        populatePersonTable(personDirectory.getPersonDirectory());
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        viewPatientDetailsTable = new javax.swing.JTable();
        lblMngPersonTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtSearchPersonName = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        btnAddVitalSign = new javax.swing.JButton();
        btnDisplayVitalSignStatus = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewPatientVitalDetailsTable = new javax.swing.JTable();
        btnViewVitalSign = new javax.swing.JButton();
        tbnDeleteVitalSign = new javax.swing.JButton();
        tbnUpdateVitalSign = new javax.swing.JButton();
        btnAbnormalVitalSign = new javax.swing.JButton();
        txtCommunityEntry = new javax.swing.JTextField();
        lblEnterCommunity = new javax.swing.JLabel();
        lblCountAbnormalVitalSign = new javax.swing.JLabel();
        txtAbnormalCount = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 0, 0));

        viewPatientDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Person Name", "Age", "Gender", "Patient Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewPatientDetailsTable);

        lblMngPersonTitle.setFont(new java.awt.Font("Gill Sans MT", 1, 18)); // NOI18N
        lblMngPersonTitle.setForeground(new java.awt.Color(153, 255, 255));
        lblMngPersonTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMngPersonTitle.setText("Manage Patient's Vital Signs");

        jLabel1.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Search:");

        txtSearchPersonName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPersonNameActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(0, 0, 0));
        btnRefresh.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(153, 255, 255));
        btnRefresh.setText("Refresh");
        btnRefresh.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 1, true));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnAddVitalSign.setBackground(new java.awt.Color(0, 0, 0));
        btnAddVitalSign.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        btnAddVitalSign.setForeground(new java.awt.Color(153, 255, 255));
        btnAddVitalSign.setText("Add Vital Signs");
        btnAddVitalSign.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 1, true));
        btnAddVitalSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalSignActionPerformed(evt);
            }
        });

        btnDisplayVitalSignStatus.setBackground(new java.awt.Color(0, 0, 0));
        btnDisplayVitalSignStatus.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        btnDisplayVitalSignStatus.setForeground(new java.awt.Color(153, 255, 255));
        btnDisplayVitalSignStatus.setText("Display Patients Vital Sign Status");
        btnDisplayVitalSignStatus.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 1, true));
        btnDisplayVitalSignStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayVitalSignStatusActionPerformed(evt);
            }
        });

        viewPatientVitalDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Timestamp", "Status", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(viewPatientVitalDetailsTable);

        btnViewVitalSign.setBackground(new java.awt.Color(0, 0, 0));
        btnViewVitalSign.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        btnViewVitalSign.setForeground(new java.awt.Color(153, 255, 255));
        btnViewVitalSign.setText("View Vital Sign");
        btnViewVitalSign.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 1, true));
        btnViewVitalSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVitalSignActionPerformed(evt);
            }
        });

        tbnDeleteVitalSign.setBackground(new java.awt.Color(0, 0, 0));
        tbnDeleteVitalSign.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        tbnDeleteVitalSign.setForeground(new java.awt.Color(153, 255, 255));
        tbnDeleteVitalSign.setText("Delete Vital Sign");
        tbnDeleteVitalSign.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 1, true));

        tbnUpdateVitalSign.setBackground(new java.awt.Color(0, 0, 0));
        tbnUpdateVitalSign.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        tbnUpdateVitalSign.setForeground(new java.awt.Color(153, 255, 255));
        tbnUpdateVitalSign.setText("Update Vital Sign");
        tbnUpdateVitalSign.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 1, true));
        tbnUpdateVitalSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbnUpdateVitalSignActionPerformed(evt);
            }
        });

        btnAbnormalVitalSign.setText("Count");
        btnAbnormalVitalSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbnormalVitalSignActionPerformed(evt);
            }
        });

        lblEnterCommunity.setFont(new java.awt.Font("Gill Sans MT", 1, 12)); // NOI18N
        lblEnterCommunity.setForeground(new java.awt.Color(153, 255, 255));
        lblEnterCommunity.setText("Find the count of the Abnormal Vital Sign in the community :");

        lblCountAbnormalVitalSign.setFont(new java.awt.Font("Gill Sans MT", 1, 12)); // NOI18N
        lblCountAbnormalVitalSign.setForeground(new java.awt.Color(153, 255, 255));
        lblCountAbnormalVitalSign.setText("Total Count of the Abnormal Vital Sign in a community :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(btnAddVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btnDisplayVitalSignStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMngPersonTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearchPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(tbnDeleteVitalSign)
                                .addGap(68, 68, 68)
                                .addComponent(tbnUpdateVitalSign))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCountAbnormalVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtAbnormalCount))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEnterCommunity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCommunityEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(466, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(481, 481, 481)
                .addComponent(btnAbnormalVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblMngPersonTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDisplayVitalSignStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbnDeleteVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbnUpdateVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnterCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCommunityEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCountAbnormalVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAbnormalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAbnormalVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchPersonNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPersonNameActionPerformed
        // TODO add your handling code here:

        String key= txtSearchPersonName.getText();
        if(key.length()==0)
        {
            JOptionPane.showMessageDialog(this, "Please enter key.",
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ArrayList<Person> searchPersons;
        searchPersons=personDirectory.searchPerson(key);
        populatePersonTable(searchPersons);
    }//GEN-LAST:event_txtSearchPersonNameActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:

        populatePersonTable(personDirectory.getPersonDirectory());
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddVitalSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalSignActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = viewPatientDetailsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person = (Person) viewPatientDetailsTable.getValueAt(selectedRow, 0);
        
        JOptionPane.showMessageDialog(workAreaJPanel, person.getPersonId());
        //Patient patient= person.getPatient();
        if(person!=null)
        {
            AddPatientVitalSignJPanel addPatientVitalSIgnJPanel = new AddPatientVitalSignJPanel(workAreaJPanel, person);
            workAreaJPanel.add("addPatientVitalSIgnJPanel", addPatientVitalSIgnJPanel);
            CardLayout layout = (CardLayout) workAreaJPanel.getLayout();
            layout.next(workAreaJPanel);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create"
                    + " Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddVitalSignActionPerformed

    private void btnViewVitalSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVitalSignActionPerformed
            // TODO add your handling code here:
            
        int selectedRow = viewPatientVitalDetailsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        VitalSigns vitalSign = (VitalSigns) viewPatientVitalDetailsTable.getValueAt(selectedRow, 0);
        UpdateVitalSignsJPanel viewUpdateVitalSignsJPanel = new UpdateVitalSignsJPanel(workAreaJPanel,
                vitalSign, Boolean.FALSE);
        workAreaJPanel.add("viewUpdateVitalSignsJPanel", viewUpdateVitalSignsJPanel);
        CardLayout layout = (CardLayout) workAreaJPanel.getLayout();
        layout.next(workAreaJPanel);
    }//GEN-LAST:event_btnViewVitalSignActionPerformed

    private void btnDisplayVitalSignStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayVitalSignStatusActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = viewPatientDetailsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person = (Person) viewPatientDetailsTable.getValueAt(selectedRow, 0);
        
        if(person!=null)
        {
            populateVitalSignTable(person);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create "
                    + "Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDisplayVitalSignStatusActionPerformed

    private void tbnUpdateVitalSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbnUpdateVitalSignActionPerformed
        // TODO add your handling code here:
        
         int selectedRow = viewPatientVitalDetailsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        VitalSigns vitalSign = (VitalSigns) viewPatientVitalDetailsTable.getValueAt(selectedRow, 0);
        
        UpdateVitalSignsJPanel viewUpdateVitalSignsJPanel = new UpdateVitalSignsJPanel(workAreaJPanel,
                vitalSign, Boolean.TRUE);
        workAreaJPanel.add("vuvsJPanel", viewUpdateVitalSignsJPanel);
        CardLayout layout = (CardLayout) workAreaJPanel.getLayout();
        layout.next(workAreaJPanel);
    }//GEN-LAST:event_tbnUpdateVitalSignActionPerformed

    private void btnAbnormalVitalSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbnormalVitalSignActionPerformed
        // TODO add your handling code here:
        
        List<Person> peopleInGivenCommunity;
        peopleInGivenCommunity = personDirectory.getPersonDirectory().stream().filter(p -> p.getCommunity().equals(txtCommunityEntry.getText())).collect(Collectors.toList());
        int abnormalCount = 0;
        for(Person person: peopleInGivenCommunity){
            VitalSignsHistory vitalSignDirectory = person.getVitalSign();
            List<VitalSigns> vitalSignLogs = vitalSignDirectory.getVitalSignsHistory();
            Collections.sort(vitalSignLogs, (a,b) -> b.getTimestamp().compareTo(a.getTimestamp()));
            if(!vitalSignLogs.isEmpty()){
                VitalSigns vSign = vitalSignLogs.get(0);
                String healthStatus = VitalSignStatus(person.getAge(),vSign);
                if(healthStatus.equals("Abnormal")){
                    abnormalCount++;
                }
            }          
}
        txtAbnormalCount.setText(String.valueOf(abnormalCount)); 
    }//GEN-LAST:event_btnAbnormalVitalSignActionPerformed

    private int viewAbnormalCount(){
        
    int vitalSignCount = 0;
        int size = personDirectory.getPersonDirectory().size();
        
       
        String communityEntered = txtCommunityEntry.getText();
        System.out.println("size of person directory:  " +size);
        System.out.println("Community entered value:  " + communityEntered);   
    for(int i =0; i < size; i++){
            String existingCommunity = personDirectory.getPersonDirectory().get(i).getCommunity().toString();
            System.out.println("Existing Community value:  " + existingCommunity);
            
            int vitalSignSize = personDirectory.getPersonDirectory().get(i).getVitalSign().getVitalSignsHistory().size();
             System.out.println("vital sign count in one object  " + vitalSignSize); 
            if(existingCommunity.equalsIgnoreCase(communityEntered)){
                //System.out.println(personDirectory.getPersonDirectory().get(i).getVitalSign().getVitalSignDirectory().size());
               System.out.println("inside if"); 
               
               for(int k =0; k < vitalSignSize; k++){
                   
                   
               }
                
            }
        }
    return vitalSignCount;
    }
    
    private void populatePersonTable(ArrayList<Person> personsList) {
        DefaultTableModel model = (DefaultTableModel) viewPatientDetailsTable.getModel();
        model.setRowCount(0);
        if(personsList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Person's found. Please add"
                    + " Person's", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (Person person : personsList) {
            Object[] row = new Object[4];
            row[0] = person;
            row[1]= person.getAge();
            row[2]= person.getGender();
            row[3]= person.getPersonId();
           
            model.addRow(row);
        }
    }
    
    
    private void populateVitalSignTable(Person person) {
        
        DefaultTableModel model = (DefaultTableModel) viewPatientVitalDetailsTable.getModel();
        model.setRowCount(0);
        if (person != null) {
            int patientAge = person.getAge();
            ArrayList<VitalSigns> vitalSignList = person.getVitalSign().getVitalSignsHistory();
            
            if (vitalSignList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No vital signs found. Please"
                        + " add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            for (VitalSigns vitalSign : vitalSignList) {
                Object[] row = new Object[3];
                row[0] = vitalSign;
                row[1] = VitalSignStatus(patientAge, vitalSign);
                row[2] =  person.getCommunity();
                model.addRow(row);
            }
        }
    }
    
//    private void populateAllVitalSigns() {
//        DefaultTableModel model = (DefaultTableModel) viewPatientVitalDetailsTable.getModel();
//        model.setRowCount(0);
//        ArrayList<VitalSign> vitalSignList = person.getVitalSign().getVitalSignDirectory();
//        JOptionPane.showMessageDialog(userContainer, vitalSignList);
//        int patientAge = person.getAge();
//        for (VitalSign vitalSign : vitalSignList) {
//              Object[] row = new Object[3];
//                row[0] = vitalSign;
//                row[1] = VitalSignStatus(patientAge, vitalSign);
//                row[2] =  person.getCommunity();
//                model.addRow(row);
//        }
//    }
//    
    
    private String VitalSignStatus(int patientAge, VitalSigns vitalSign) {
        String vitalSignStatus = "Normal";
        
        int respirationRate = vitalSign.getRespiratoryRate();
        int heartRate = vitalSign.getHeartRate();
        int bloodPressure = vitalSign.getBloodPressure();
        float weight = vitalSign.getWeight();
        
        /*Toddler*/
        if (patientAge >= 1 && patientAge <= 3) {
            if ((respirationRate < 20 || respirationRate > 30) /*Respiration Rate*/
                    || (heartRate < 80 || heartRate > 130) /*Heart Rate*/
                    || (bloodPressure < 80 || bloodPressure > 110) /*Blood Pressure*/
                    || (weight < 22 || weight > 31)) /*Weight*/ {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Preschooler*/
        if (patientAge >= 4 && patientAge <= 5) {
            if ((respirationRate < 20 || respirationRate > 30)
                    || (heartRate < 80 || heartRate > 120)
                    || (bloodPressure < 80 || bloodPressure > 110)
                    || (weight < 31 || weight > 40)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*School Age*/
        if (patientAge >= 6 && patientAge <= 12) {
            if ((respirationRate < 20 || respirationRate > 30)
                    || (heartRate < 70 || heartRate > 110)
                    || (bloodPressure < 80 || bloodPressure > 120)
                    || (weight < 41 || weight > 92)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Adolescent*/
        if (patientAge >= 13) {
            if ((respirationRate < 12 || respirationRate > 20)
                    || (heartRate < 55 || heartRate > 105)
                    || (bloodPressure < 110 || bloodPressure > 120)
                    || (weight < 110)) {
                vitalSignStatus = "Abnormal";
            }
        }
        return vitalSignStatus;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbnormalVitalSign;
    private javax.swing.JButton btnAddVitalSign;
    private javax.swing.JButton btnDisplayVitalSignStatus;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnViewVitalSign;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCountAbnormalVitalSign;
    private javax.swing.JLabel lblEnterCommunity;
    private javax.swing.JLabel lblMngPersonTitle;
    private javax.swing.JButton tbnDeleteVitalSign;
    private javax.swing.JButton tbnUpdateVitalSign;
    private javax.swing.JTextField txtAbnormalCount;
    private javax.swing.JTextField txtCommunityEntry;
    private javax.swing.JTextField txtSearchPersonName;
    private javax.swing.JTable viewPatientDetailsTable;
    private javax.swing.JTable viewPatientVitalDetailsTable;
    // End of variables declaration//GEN-END:variables

    
}
